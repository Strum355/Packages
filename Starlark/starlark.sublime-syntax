%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
# [PackageDev] target_format: plist, ext: tmLanguage
name: Starlark
scopeName: source.starlark
fileTypes:
- bzl
- star
- build_defs
- BUILD

patterns:
- include: '#statement'

- include: '#expression'

repository:
  assignment-operator:
    name: keyword.operator.assignment.starlark
    match: //=|\+=|-=|/=|\*=|%=|=(?!=)

  builtin-constant:
    name: keyword.illegal.name.starlark
    match: \b(True|False|None)\b

  builtin-function:
    patterns:
    - name: support.function.starlark
      match: (?<!\.)\b(all|any|bool|dict|dir|enumerate|getattr|hasattr|hash|int|len|list|load|max|min|print|range|repr|reversed|sorted|str|tuple|type|zip)\b

  code-tag:
    match: (?:\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\b)
    captures:
      '1': {name: keyword.codetag.notation.starlark}

  constant-identifier:
    name: variable.other.constant.starlark
    match: \b_*[[:upper:]][[:upper:]\d]*(_\w*)?\b

  dictionary-literal:
    comment: This also currently covers comprehensions.
    begin: \{
    beginCaptures:
      '0': {name: punctuation.definition.dict.begin.starlark}
    end: \}
    endCaptures:
      '0': {name: punctuation.definition.dict.end.starlark}
    patterns:
    - include: '#expression'

  discouraged-semicolon:
    patterns:
    - name: invalid.deprecated.semicolon.starlark
      match: \;$

  discouraged-string-line-continuation:
    name: invalid.deprecated.language.starlark
    match: \\$

  docstring:
    patterns:
    - name: comment.block.documentation.starlark
      begin: ('''|""")
      beginCaptures:
        '1': {name: punctuation.definition.string.begin.starlark}
      end: (\1)
      endCaptures:
        '1': {name: punctuation.definition.string.end.starlark}
      patterns:
      - include: '#code-tag'
      - include: '#docstring-content'
    - name: comment.block.documentation.starlark
      begin: (r)('''|""")
      beginCaptures:
        '1': {name: storage.type.string.starlark}
        '2': {name: punctuation.definition.string.begin.starlark}
      end: (\2)
      endCaptures:
        '1': {name: punctuation.definition.string.end.starlark}
      patterns:
      - include: '#string-consume-escape'
      - include: '#code-tag'
    - name: comment.line.documentation.starlark
      begin: ('|")
      beginCaptures:
        '1': {name: punctuation.definition.string.begin.starlark}
      end: (\1)|((?<!\\)\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.starlark}
        '2': {name: invalid.illegal.newline.starlark}
      patterns:
      - include: '#code-tag'
      - include: '#docstring-content'
    - name: comment.line.documentation.starlark
      begin: (r)('|")
      beginCaptures:
        '1': {name: storage.type.string.starlark}
        '2': {name: punctuation.definition.string.begin.starlark}
      end: (\2)|((?<!\\)\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.starlark}
        '2': {name: invalid.illegal.newline.starlark}
      patterns:
      - include: '#string-consume-escape'
      - include: '#code-tag'

  docstring-content:
    patterns:
    - include: '#string-escape-sequence'
    - include: '#discouraged-string-line-continuation'

  docstring-statement:
    begin: ^(?=\s*r?('''|"""|'|"))
    end: (?<='''|"""|'|")
    patterns:
    - include: '#docstring'

  expression:
    patterns:
    - include: '#expression-base'
    - include: '#member-access'
    - include: '#variable'

  expression-base:
    patterns:
    - include: '#line-comment'
    - include: '#literal'
    - include: '#string'
    - include: '#illegal-operator'
    - include: '#operator'
    - include: '#dictionary-literal'
    - include: '#subscript-expression'
    - include: '#list-literal'
    - include: '#parenthesized-expression'
    - include: '#function-call'
    - include: '#builtin-function'
    - include: '#constant-identifier'
    - include: '#type-identifier'
    - include: '#illegal-name'
    - include: '#line-continuation'

  function-arguments:
    contentName: meta.function-call.arguments.starlark
    begin: (?:(\()(?:\s*(\*\*|\*))?)
    beginCaptures:
      '1': {name: punctuation.definition.arguments.begin.starlark}
      '2': {name: keyword.operator.unpacking.arguments.starlark}
    end: (?=\))(?!\)\s*\()
    patterns:
    - match: (?:(,)(?:\s*(\*\*|\*))?)
      captures:
        '1': {name: punctuation.separator.arguments.starlark}
        '2': {name: keyword.operator.unpacking.arguments.starlark}
    - include: '#illegal-name'
    - match: \b([[:alpha:]_]\w*)\s*(=)(?!=)
      captures:
        '1': {name: meta.parameter.keyword.starlark}
        '2': {name: keyword.operator.assignment.starlark}
    - name: keyword.operator.assignment.starlark
      match: =(?!=)
    - include: '#expression'
    - match: \s*(\))\s*(\()
      captures:
        '1': {name: punctuation.definition.arguments.end.starlark}
        '2': {name: punctuation.definition.arguments.begin.starlark}

  function-call:
    name: meta.function-call.starlark
    begin: \b(?=([[:alpha:]_]\w*)\s*(\())
    end: (\))
    endCaptures:
      '1': {name: punctuation.definition.arguments.end.starlark}
    patterns:
    - include: '#function-call-name'
    - include: '#function-arguments'

  function-call-name:
    patterns:
    - include: '#type-identifier'
    - include: '#builtin-function'
    - name: entity.name.function.starlark
      match: \b([[:alpha:]_]\w*)\b

  function-definition:
    name: meta.function.starlark
    begin: \s*\b(def)\s+(?=[[:alpha:]_][[:word:]]*\s*\()
    beginCaptures:
      '1': {name: storage.type.function.starlark}
    end: (:|(?=[#'"\n]))
    endCaptures:
      '1': {name: punctuation.section.function.begin.starlark}
    patterns:
    - include: '#function-definition-name'
    - include: '#function-definition-parameters'
    - include: '#line-continuation'

  function-definition-name:
    patterns:
    - include: '#builtin-constant'
    - include: '#illegal-name'
    - include: '#builtin-function'
    - name: entity.name.function.starlark
      match: \b([[:alpha:]_]\w*)\b

  function-definition-parameter-default-value:
    begin: (=)
    beginCaptures:
      '1': {name: keyword.operator.starlark}
    end: (,)|(?=\))
    endCaptures:
      '1': {name: punctuation.separator.parameters.starlark}
    patterns:
    - include: '#expression'

  function-definition-parameters:
    name: meta.function.parameters.starlark
    begin: (\()
    beginCaptures:
      '1': {name: punctuation.definition.parameters.begin.starlark}
    end: (\))
    endCaptures:
      '1': {name: punctuation.definition.parameters.end.starlark}
    patterns:
    - name: keyword.operator.unpacking.parameter.starlark
      match: (\*\*|\*)
    - include: '#illegal-name'
    - include: '#builtin-constant'
    - match: ([[:alpha:]_]\w*)\s*(?:(,)|(?=[)#\n=]))
      captures:
        '1': {name: variable.parameter.starlark}
        '2': {name: punctuation.separator.parameters.starlark}
    - include: '#line-comment'
    - include: '#function-definition-parameter-default-value'

  illegal-name:
    name: keyword.control.flow.starlark
    match: \b(and|as|assert|break|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|load|nonlocal|not|or|pass|raise|return|try|while|with|yield)\b

  illegal-operator:
    patterns:
    - name: invalid.illegal.operator.starlark
      match: '&&|\|\||--|\+\+'
    - name: invalid.illegal.operator.starlark
      match: '[?$]'
    - name: invalid.illegal.operator.starlark
      match: '!\b'

  line-comment:
    name: comment.line.number-sign.starlark
    begin: (\#)
    beginCaptures:
      '1': {name: punctuation.definition.comment.starlark}
    end: ($)
    patterns:
    - include: '#code-tag'

  line-continuation:
    patterns:
    - match: (\\)\s*(\S.*$\n?)
      captures:
        '1': {name: invalid.deprecated.continuation.line.starlark}
        '2': {name: invalid.illegal.line.continuation.starlark}
    - begin: (\\)\s*$\n?
      beginCaptures:
        '1': {name: invalid.deprecated.continuation.line.starlark}
      end: (?=^\s*$)|(?!(\s*[rR]?('''|"""|'|"))|(\G$))
      patterns:
      - include: '#string'

  list-literal:
    comment: This also currently covers comprehensions.
    begin: \[
    beginCaptures:
      '0': {name: punctuation.definition.list.begin.starlark}
    end: \]
    endCaptures:
      '0': {name: punctuation.definition.list.end.starlark}
    patterns:
    - include: '#expression'

  literal:
    patterns:
    - name: constant.language.starlark
      match: \b(True|False|None)\b
    - include: '#number'

  member-access:
    begin: (\.)\s*(?!\.)
    beginCaptures:
      '1': {name: punctuation.accessor.starlark}
    end: (?# Stop when we read non-whitespace followed by non-word; i.e. when finished
      reading an identifier or function call)(?<=\S)(?=\W)|(?# Stop when seeing the
      start of something that's not a word; e.g., a non-identifier)(^|(?<=\s))(?=[^\\\w\s])|$
    patterns:
    - include: '#function-call'
    - include: '#member-access-base'
    - include: '#member-access-property'

  member-access-base:
    patterns:
    - include: '#illegal-name'
    - include: '#builtin-constant'
    - include: '#constant-identifier'
    - include: '#type-identifier'
    - include: '#line-continuation'
    - include: '#subscript-expression'

  member-access-property:
    name: variable.other.property.starlark
    match: \b([[:alpha:]_]\w*)\b

  number:
    patterns:
    - include: '#number-decimal'
    - include: '#number-hexadecimal'
    - include: '#number-octal'
    - name: invalid.illegal.name.starlark
      match: \b[0-9]+\w+

  number-decimal:
    name: constant.numeric.decimal.starlark
    match: (?<![\w\.])(?:[1-9][0-9]*|0+)\b

  number-hexadecimal:
    name: constant.numeric.hex.starlark
    match: (?<![\w\.])0[xX][0-9a-fA-F]+\b

  number-octal:
    name: constant.numeric.octal.starlark
    match: (?<![\w\.])0[oO][0-7]+\b

  operator:
    match: \b(?<!\.)(?:(and|or|not|in)(?# 1)|(for|if|else)(?# 2))(?!\s*:)\b|(\*|\+|-|%|//|/)(?#
      3)|(!=|==|>=|<=|<|>)(?# 4)
    captures:
      '1': {name: keyword.operator.logical.starlark}
      '2': {name: keyword.control.flow.starlark}
      '3': {name: keyword.operator.arithmetic.starlark}
      '4': {name: keyword.operator.comparison.starlark}

  parenthesized-expression:
    comment: This covers tuples and parenthesized expressions.
    begin: \(
    beginCaptures:
      '0': {name: punctuation.parenthesis.begin.starlark}
    end: \)
    endCaptures:
      '0': {name: punctuation.parenthesis.end.starlark}
    patterns:
    - include: '#expression'

  statement:
    patterns:
    - include: '#function-definition'
    - include: '#statement-keyword'
    - include: '#assignment-operator'
    - include: '#docstring-statement'
    - include: '#discouraged-semicolon'

  statement-keyword:
    patterns:
    - name: storage.type.function.starlark
      match: \b(\s*def)\b
    - name: keyword.control.flow.starlark
      match: \b(?<!\.)(break|continue|elif|else|for|if|pass|return)\b
    - name: invalid.illegal.keyword.starlark
      match: \b(?<!\.)(as|assert|class|del|except|finally|from|global|import|is|lambda|nonlocal|raise|try|while|with|yield)\b

  string:
    patterns:
    - include: '#string-raw-quoted-multi-line'
    - include: '#string-raw-quoted-single-line'
    - include: '#string-quoted-multi-line'
    - include: '#string-quoted-single-line'

  string-consume-escape:
    match: \\['"\n\\]

  string-content:
    patterns:
    - include: '#string-escape-sequence'
    - include: '#string-illegal-escape-sequence'
    - include: '#discouraged-string-line-continuation'
    - include: '#string-format-placeholder-percent'
    - include: '#string-format-placeholder-braces'

  string-escape-sequence:
    name: constant.character.escape.starlark
    match: \\[\\"'nrt]

  string-format-placeholder-braces:
    patterns:
    - name: constant.character.format.placeholder.other.starlark
      match: \{(?:[0-9]+|[[:alpha:]_][[:alnum:]_]*)?\}

  string-format-placeholder-percent:
    name: constant.character.format.placeholder.other.starlark
    match: '%[drs%]'

  string-illegal-escape-sequence:
    name: invalid.illegal.character.escape.starlark
    match: \\[^\\"'nrt]

  string-quoted-multi-line:
    name: string.quoted.multi.starlark
    begin: ('''|""")
    beginCaptures:
      '1': {name: punctuation.definition.string.begin.starlark}
    end: (\1)
    endCaptures:
      '1': {name: punctuation.definition.string.end.starlark}
    patterns:
    - include: '#string-content'

  string-quoted-single-line:
    name: string.quoted.single.starlark
    begin: (['"])
    beginCaptures:
      '1': {name: punctuation.definition.string.begin.starlark}
    end: (\1)|((?<!\\)\n)
    endCaptures:
      '1': {name: punctuation.definition.string.end.starlark}
      '2': {name: invalid.illegal.newline.starlark}
    patterns:
    - include: '#string-content'

  string-raw-content:
    patterns:
    - include: '#string-consume-escape'
    - include: '#string-format-placeholder-percent'
    - include: '#string-format-placeholder-braces'

  string-raw-quoted-multi-line:
    name: string.quoted.raw.multi.starlark
    begin: \b(r)('''|""")
    beginCaptures:
      '1': {name: storage.type.string.starlark}
      '2': {name: punctuation.definition.string.begin.starlark}
    end: (\2)
    endCaptures:
      '1': {name: punctuation.definition.string.end.starlark}
    patterns:
    - include: '#string-raw-content'

  string-raw-quoted-single-line:
    name: string.quoted.raw.single.starlark
    begin: \b(r)(['"])
    beginCaptures:
      '1': {name: storage.type.string.starlark}
      '2': {name: punctuation.definition.string.begin.starlark}
    end: (\2)|((?<!\\)\n)
    endCaptures:
      '1': {name: punctuation.definition.string.end.starlark}
      '2': {name: invalid.illegal.newline.starlark}
    patterns:
    - include: '#string-raw-content'

  subscript-expression:
    patterns:
    - name: meta.item-access.starlark
      begin: \b(?=[[:alpha:]_]\w*\s*\[)
      end: (\])
      endCaptures:
        '1': {name: punctuation.definition.arguments.end.starlark}
      patterns:
      - include: '#subscript-receiver'
      - include: '#subscript-index'
      - include: '#expression'

  subscript-index:
    contentName: meta.item-access.arguments.starlark
    begin: (\[)
    beginCaptures:
      '1': {name: punctuation.definition.arguments.begin.starlark}
    end: (?=\])
    patterns:
    - include: '#expression'

  subscript-receiver:
    patterns:
    - include: '#builtin-function'
    - include: '#constant-identifier'
    - name: variable.other.starlark
      match: \b([[:alpha:]_]\w*)\b

  type-identifier:
    name: entity.name.type.starlark
    match: \b_*[[:upper:]][[:alpha:]\d]*(_\w*)?\b

  variable:
    name: variable.other.starlark
    match: \b([[:alpha:]_]\w*)\b
